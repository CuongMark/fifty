<?php
/**
 * Magestore
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Magestore.com license that is
 * available through the world-wide-web at this URL:
 * http://www.magestore.com/license-agreement.html
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade this extension to newer
 * version in the future.
 *
 * @category    Magestore
 * @package     Magestore_Customercredit
 * @copyright   Copyright (c) 2017 Magestore (http://www.magestore.com/)
 * @license     http://www.magestore.com/license-agreement.html
 *
 */

namespace Angel\Fifty\Block\Adminhtml\Fifty\Details\Ticket;

use Angel\Fifty\Model\ResourceModel\Ticket\Collection;
use Angel\Fifty\Model\ResourceModel\Ticket\CollectionFactory;
use Angel\Fifty\Model\TicketManagement;

class Grid extends \Magento\Backend\Block\Widget\Grid\Extended
{
    /**
     * @var CollectionFactory
     */
    protected $collectionFactory;
    /**
     * @var TicketManagement
     */
    protected $ticketManagement;
    public function __construct(
        \Magento\Backend\Block\Template\Context $context,
        \Magento\Backend\Helper\Data $backendHelper,
        CollectionFactory $collectionFactory,
        TicketManagement $ticketManagement,
        array $data = []
    ){
        parent::__construct($context, $backendHelper, $data);
        $this->collectionFactory = $collectionFactory;
        $this->ticketManagement = $ticketManagement;
    }

    protected function _construct()
    {
        parent::_construct();
        $this->setId('fiftyGrid');
        $this->setDefaultSort('ticket_id');
        $this->setDefaultDir('DESC');
        $this->setSaveParametersInSession(true);
        $this->setUseAjax(true);
    }

    protected function _prepareCollection()
    {
        /** @var Collection $collection */
        $collection = $this->collectionFactory->create();
        $collection->addFieldToSelect('*');
        $this->ticketManagement->joinProductName($collection);
        $this->ticketManagement->joinCustomerEmail($collection);
        $productId = $this->getRequest()->getParam('id');
        if ($productId) {
            $collection->addFieldToFilter('product_id', $productId);
        }
        $this->setCollection($collection);
        return parent::_prepareCollection();
    }

    protected function _prepareColumns()
    {
        try {
            $this->addColumn('ticket_id', array(
                'header' => __('ID'),
                'width' => '50px',
                'index' => 'ticket_id',
                'type' => 'number',
            ));
            $this->addColumn('customer_email', array(
                'header' => __('Customer'),
                'width' => '150',
                'index' => 'customer_email',
                'renderer' => 'Angel\Fifty\Block\Adminhtml\Fifty\Renderer\Customer'
            ));
//            $this->addColumn('product_name', array(
//                'header' => __('Name'),
//                'index' => 'product_name'
//            ));
            $this->addColumn('start', array(
                'header' => __('Start'),
                'index' => 'start'
            ));
            $this->addColumn('end', array(
                'header' => __('End'),
                'index' => 'end'
            ));
            $this->addColumn('created_at', array(
                'header' => __('Purchased At'),
                'align' => 'left',
                'index' => 'created_at',
                'type' => 'datetime',
            ));
            $currency = $this->_storeManager->getStore()->getCurrentCurrencyCode();
            $this->addColumn('price', array(
                'header' => __('Price'),
                'width' => '100',
                'align' => 'right',
                'currency_code' => $currency,
                'index' => 'price',
                'type' => 'price'
            ));
            $this->addColumn('credit_transaction_id', array(
                'header' => __('Credit Transaction Id'),
                'index' => 'credit_transaction_id'
            ));
        } catch (\Exception $e){

        }

        $this->addExportType('*/*/exportCSV', __('CSV'));
        return parent::_prepareColumns(); // TODO: Change the autogenerated stub
    }


    public function getGridUrl()
    {
        return $this->getUrl('*/*/details', array('_current' => true));
    }

    public function getRowUrl($row)
    {
        return '';
    }

    public function getCsv()
    {
        $csv = '';
        $this->_isExport = true;
        $this->_prepareGrid();
        $this->getCollection()->getSelect()->limit();
        $this->getCollection()->setPageSize(0);
        $this->getCollection()->load();
        $this->_afterLoadCollection();
        $data = array();
        $data[] = '"' . __('ID') . '"';
        $data[] = '"' . __('Customer') . '"';
        $data[] = '"' . __('Start') . '"';
        $data[] = '"' . __('End') . '"';
        $data[] = '"' . __('Purchased At') . '"';
        $data[] = '"' . __('Price') . '"';
        $data[] = '"' . __('Credit Transaction Id') . '"';
        $csv .= implode(',', $data) . "\n";

        foreach ($this->getCollection() as $item) {
            $data = [
                $item->getId(),
                $item->getCustomerEmail(),
                $item->getStart(),
                $item->getEnd(),
                $item->getCreatedAt(),
                $item->getPrice(),
                $item->getCreditTransactionId()
            ];
            $str = implode(',',$data);
            $csv .= $str . "\n";
        }
        return $csv;
    }
}